syntax = "proto3";
option csharp_namespace = "grpcService";
package greet;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply); // Unary
  rpc SayHelloStream (HelloRequest) returns (stream HelloReply); // server streaming
  rpc SayHelloStream_useCt (HelloRequest) returns (stream HelloReply); // server streaming
  rpc SayHelloFromClient (stream HelloRequest) returns (HelloReply); // client streaming
  rpc StreamingBothWays(stream HelloRequest) returns (stream HelloReply); // bi-directional streaming
}
/*
each field in the message definition has a unique number. 
These field numbers are used to identify your fields in the message binary format, 
and should not be changed once your message type is in use. Note that field numbers in the range 1 through 15 take one byte to encode, including the field number and the field's type (you can find out more about this in Protocol Buffer Encoding). Field numbers in the range 16 through 2047 take two bytes. So you should reserve the numbers 1 through 15 for very frequently occurring message elements. Remember to leave some room for frequently occurring elements that might be added in the future.
*/

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings.
message HelloReply {
  string message = 1;
}


